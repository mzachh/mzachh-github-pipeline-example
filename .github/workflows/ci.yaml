name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - dev
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest

    env:
      HUMANITEC_ORG: ${{ secrets.HUMANITEC_ORG }}
      HUMANITEC_TOKEN: ${{ secrets.HUMANITEC_TOKEN }}
      HUMANITEC_APP: ${{ secrets.HUMANITEC_APP }}
      HUMANITEC_URL: "https://api.humanitec.io"
      TFC_TOKEN: ${{ secrets.TFC_TOKEN }}
      TFC_ORG: ${{ secrets.TFC_ORG }}
      TFC_WORKSPACE: ${{ secrets.TFC_WORKSPACE }}


    steps:
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: us-east-2

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      - uses: actions/checkout@v3

      # prep work
      - name: preparation
        run: |
          ls
          pwd
          echo $HOME
          mkdir $HOME/.bin
          echo $PATH
          echo $GITHUB_PATH
          echo "${HOME}/.bin" >> $GITHUB_PATH
          echo $PATH
          echo $GITHUB_PATH
      - name: setup tools
        run: |
          curl -L https://github.com/a8m/envsubst/releases/download/v1.4.2/envsubst-Linux-x86_64 -o ~/.bin/envsubst
          curl -L https://github.com/score-spec/score-humanitec/releases/download/0.3.0-rc1/score-humanitec_0.3.0-rc1_linux_amd64.tar.gz -o /tmp/score.tar.gz
          tar xvzf /tmp/score.tar.gz -C /tmp && cp /tmp/score-humanitec ~/.bin
          curl -L https://releases.hashicorp.com/terraform/1.4.0/terraform_1.4.0_linux_amd64.zip -o /tmp/terraform.zip
          unzip /tmp/terraform.zip && mv terraform ~/.bin
          chmod +x ~/.bin

          terraform --version
          jq --version
          score-humanitec --version

      # Humanitec resource definitions, state stored in Terraform Cloud
      - name: Setup Humanitec resource definitions, state stored in Terraform state store
        run: |
          cd humanitec-resource-definitions-terraform
          pwd && ls
          export TF_VAR_HUMANITEC_ORG=$HUMANITEC_ORG
          export TF_VAR_HUMANITEC_TOKEN=$HUMANITEC_TOKEN
          export TF_VAR_HUMANITEC_APP=$HUMANITEC_APP
          chmod +x tfcloud.sh && ./tfcloud.sh
          terraform init -upgrade
          terraform plan
          terraform apply -auto-approve
    
      # docker, and set the $IMAGE_NAME and use overrides later
      - name: Build and Push to registry.humanitec.io
        id: build-step
        uses: humanitec/build-push-to-humanitec@v1
        with:
          humanitec-token: ${{ secrets.HUMANITEC_TOKEN }}
          organization: ${{ secrets.HUMANITEC_ORG }}
          image-name: app
          context: ./app
          #tag: ${{ steps.get_version.outputs.VERSION }}

      # dev env
      - name: Deploy to dev
        run: |
          cd score
          chmod +x deploy_dev.sh
          #IMAGE_NAME="${{ steps.build-step.outputs.image }}" envsubst < overrides.debug.yaml.example > overrides.debug.yaml
          HUMANITEC_ENVIRONMENT=development ./deploy_dev.sh

      # prod env
      - name: Deploy to prod
        run: |
          cd score
          chmod +x deploy_prod.sh
          #IMAGE_NAME="${{ steps.build-step.outputs.image }}" envsubst < overrides.debug.yaml.example > overrides.debug.yaml
          HUMANITEC_ENVIRONMENT=production HUMANITEC_FROM_ENVIRONMENT=development ./deploy_prod.sh
